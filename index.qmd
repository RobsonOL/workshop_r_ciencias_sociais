---
title: "Transformando Dados em Informações"
subtitle: "Usando **R** nas Ciências Sociais"
author: "Dr Robson Oliveira"
institute: "IFPB"
logo: logo_ifpb.png
footer: "robsonolima.com.br"
incremental: true
execute:
  echo: true
format: 
  revealjs:
    chalkboard: true
    theme: serif
    slide-tone: false
    auto-animate: true
    code-fold: show
    code-summary: ">"
    code-link: true
editor: visual
---

# 

**Encontre esses slides em:**

![https://robsonol.github.io/workshop_r\_ciencias_sociais/](img/qrcode_slides.png){fig-align="center"}

# Contando Histórias com Dados

![](img/storytelling.png){fig-align="center" width="117"}

## Contando Histórias com Dados

::: columns
::: {.column width="50%"}
![Edward Morgan Forster. Autor de "Aspects of the Novel (1927)"](img/foster.jpg){fig-align="center"}
:::

::: {.column width="50%"}
-   História

-   Pessoas

-   Trama/enredo

-   Fantasia

-   Profecias

-   Padrões

-   Ritmo
:::
:::

## Contando Histórias com Dados

::: columns
::: {.column width="50%"}
![Fonte: Allison Horst](img/tidydata_5.jpg)
:::

::: {.column width="50%"}
-   Planejar

-   Simular

-   Adquirir

-   Explorar

-   Compartilhar
:::
:::

# 1. Pré-Requisitos

## R

![](img/R_logo.svg.png){width="600"}

## R

::: nonincremental
1.  Baixar e instalar **R** em [<https://cloud.r-project.org>]{.rn}
:::

![](img/r_console.png){fig-align="center" width="400"}

## Rstudio

::: nonincremental
2.  Instalar o RStudio: [https://www.rstudio.com](https://www.rstudio.com/products/rstudio/download/)
:::

![](img/rstudio.png){fig-align="center" width="400"}

## Pacotes {auto-animate="true"}

![](img/tidyverse.png){fig-align="center" width="173"}

## Pacotes {auto-animate="true"}

::: nonincremental
3.  Instalar os pacotes necessários
:::

```{r eval=FALSE, `code-line-numbers`="2"}
#| echo=TRUE
# instalar um pacote:
install.packages("tidyverse")

# Só é preciso instalar um pacote uma única vez.
# Mas é preciso carrega-lo sempre que iniciarmos o R:
library(tidyverse)
```

## Pacotes {auto-animate="true"}

::: nonincremental
3.  Instalar os pacotes necessários
:::

```{r eval=FALSE, `code-line-numbers`="6"}
#| echo=TRUE
# instalar um pacote:
install.packages("tidyverse")

# Só é preciso instalar um pacote uma única vez.
# Mas é preciso carrega-lo sempre que iniciarmos o R:
library(tidyverse)
```

## Rodando Código no R {auto-animate="true"}

```{r}
1 + 2
```

## Rodando Código no R {auto-animate="true"}

```{r}
1 / 200 * 30
```

## Rodando Código no R {auto-animate="true"}

```{r}
sqrt(49)
```

## Criando objetos com `<-` {auto-animate="true"}

```{r, `code-line-numbers`="2"}
# podemos salvar o resultado de 3 * 4 como x
x <- 3 * 4
```

## Criando objetos com `<-` {auto-animate="true"}

```{r, `code-line-numbers`="5" }
# podemos salvar o resultado de 3 * 4 como x
x <- 3 * 4

# para inspecionar o valor de `x` digitamos seu nome:
x
```

## Chamando Funções

R tem uma série de funções. Por exemplo, para criar uma sequência de números entre 1 e 10, usamos a função `seq()`:

```{r}
seq(1, 10)
```

## Chamando Funções

Sempre chamamos uma função da seguinte forma:

```{r eval=FALSE}
nome_funcao(argumento1 = valor1, argumento2 = valor2, ...)
```

## Chamando Funções {auto-animate="true"}

Exemplos:

```{r, `code-line-numbers`="2" }
# somar dois valores
sum(10, 15)
```

## Chamando Funções {auto-animate="true"}

Exemplos:

```{r}
# somar dois valores
sum(10, 15)
```

```{r, `code-line-numbers`="2" }
# encontrar raiz quadrada
sqrt(49)
```

## Criando objetos com `<-` {auto-animate="true"}

Sempre **atribuimos** da mesma forma:

```{r eval=FALSE}
nome_objeto <- valor

```

## Criando objetos com `<-` {auto-animate="true"}

Sempre **atribuimos** da mesma forma:

```{r eval=FALSE}
nome_objeto <- valor

```

Dica: Podemos ler o código acima como "estamos salvando o valor como ***nome_objeto***".

## Nome de objetos

Nome de objetos precisam:

-   Começar com letras

-   Conter letras, números, `_` e `.`

-   Ser descritivo

-   Recomendo separar palavras com `_`: `sequencia_entre_1_10`

## Nome de objetos {auto-animate="true"}

```{r, `code-line-numbers`="2"}
# salvar a sequência de números como um objeto
sequencia_entre_1_10 <- seq(1, 10)

# somar todos os valores da sequência
sum(sequencia_entre_1_10)
```

## Nome de objetos {auto-animate="true"}

```{r, `code-line-numbers`="5"}
# salvar a sequência de números como um objeto
sequencia_entre_1_10 <- seq(1, 10)

# somar todos os valores da sequência
sum(sequencia_entre_1_10)
```

## Banco de dados {auto-animate="true"}

Um tipo especial de objeto é o `data.frame`:

```{r eval=FALSE, `code-line-numbers`="2" }
# mtcars é um banco de dados com informações de veículos:
dados_carros <- mtcars

# podemos inspecionar o data frame:
dados_carros
```

## Banco de dados {auto-animate="true"}

Um tipo especial de objeto é o `data.frame`:

```{r, `code-line-numbers`="5" }
# mtcars é um banco de dados com informações de veículos:
dados_carros <- mtcars

# podemos inspecionar o data frame:
dados_carros
```

## 

```{r}
#| echo=FALSE
dados_carros <- mtcars
#options(DT.options = list(pageLength = 4))
font.size <- "14pt"

dados_carros |> DT::datatable(
     options=list(
       initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
          "}")
       )
     ) 
```

## Banco de dados {auto-animate="true"}

##  ![Fonte: Allison Horst](img/tidydata_2.jpg)

Vamos trabalhar com dados no R no formato `tidy`:

![](img/tidy-1.png)

## Banco de Dados

![Fonte: Allison Horst](img/tidydata_3.jpg)

# 2. Importar Dados

![](img/import_r.png){fig-align="center" width="300"}

##  {auto-animate="true"}

Importando dados de consumo de energia usando a função `read_csv()`:

```{r eval=FALSE, `code-line-numbers`="2" }
# importar o pacote
library(tidyverse)

# salvar o arquivo csv como o objeto "despesas"
consumo_energia <- read_csv(file = "dados/consumo_energia_brasil.csv")

# mostrar apenas as primeiras linhas do banco de dados:
consumo_energia

```

##  {auto-animate="true"}

Importando dados de consumo de energia usando a função `read_csv()`:

```{r eval=FALSE, `code-line-numbers`="5" }
# importar o pacote
library(tidyverse)

# salvar o arquivo csv como o objeto "consumo_energia"
consumo_energia <- read_csv(file = "dados/consumo_energia_brasil.csv")

# mostrar apenas as primeiras linhas do banco de dados:
consumo_energia

```

##  {auto-animate="true"}

Importando dados de consumo de energia usando a função `read_csv()`:

```{r, `code-line-numbers`="8" }
# importar o pacote
library(tidyverse)

# salvar o arquivo csv como o objeto "consumo_energia"
consumo_energia <- read_csv(file = "dados/consumo_energia_brasil.csv")

# mostrar apenas as primeiras linhas do banco de dados:
consumo_energia
```

##  {#tabela-dinamica1}

```{r tab-dinamica}
#| echo=FALSE
#options(DT.options = list(pageLength = 4))
font.size <- "12pt"

consumo_energia |> 
  filter(ano == 2020) |> 
  DT::datatable(
     options=list(
       initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
          "}")
       )
     ) 
```

# 3. Transformação de dados

![](img/hex-dplyr.png){fig-align="center" width="400"}

## Funções do `dplyr`

-   `filter()` filtra apenas observações com valores específicos

-   `arrange()` reordena as linhas da base

-   `select()` seleciona apenas variáveis de interesse

-   `mutate()` cria novas variáveis como função das demais

-   `summarise()` cria estatísticas descritivas

## Função `filter`

![](img/filter.png)

## Funcionamento da função `filter()`

```{r eval=FALSE}
filter(<DADOS>, <REGRAS>)
```

##  {auto-animate="true"}

Se quisermos filtrar o consumo de energia da Paraíba:

```{r}
filter(consumo_energia, sigla_uf == "PB")
```

##  {auto-animate="true"}

Se quisermos filtrar o consumo de energia da Paraíba **apenas para consumidores residenciais**:

```{r}
filter(consumo_energia, sigla_uf == "PB" & tipo_consumo == "Residencial")
```

## Pipe `|>`

O *pipe `|>`* é um operador que permite reescrever as expressões de outra forma. Dica: Leia o *pipe* como um **ENTÃO**:

![](img/pipe1.png)

## 

```{r eval=FALSE}
# ao invés de escrever assim:
filter(consumo_energia, ano == 2020, sigla_uf == "PB")


```

```{r}
# escrevemos assim:
consumo_energia |> # pegue os dados
  filter(ano == 2020 & sigla_uf == "PB") # ENTÃO filtre para...
```

## Função `select()`

![](img/select.png)

## Função `select()`

Podemos selecionar apenas as variáveis desejadas, como `ano`, `mes`, `sigla_uf` e `consumo`:

```{r}
consumo_energia |> 
  select(ano, mes, sigla_uf, consumo)
```

## Função `select()`

Podemos usar o `|>` para concatenar `filter()` e `select()`:

```{r}
consumo_energia |> 
  filter(sigla_uf == "PB" & tipo_consumo == "Residencial") |> # ENTÃO filtre os dados
  select(ano, mes, consumo) # então selecione as colunas
```

## Função `select()`

Vamos salvar o resultado como o objeto `energia_residencial_pb`:

```{r}
energia_residencial_pb <- consumo_energia |> 
  filter(sigla_uf == "PB" & tipo_consumo == "Residencial") |> 
  select(ano, mes, consumo) 
```

## Função `mutate()`

![](img/mutate.png)

## 

Na função `mutate()` especifique o nome da nova variável e após o sinal de `=` indique a transformação que deseja realizar:

```{r eval=FALSE}

# a função abaixo cria uma variavel nova como a soma
# da variavel_1 e variavel_2
dados <- mutate(variavel_nova = variavel_1 + variavel_2)
```

## Função `mutate()`

Podemos criar uma variável chamada `data`, ao unir dia, mês e ano. Para unir textos, usamos a função `paste0`:

```{r eval=FALSE,`code-line-numbers`="3"}
energia_residencial_pb <- energia_residencial_pb |> 
  # unir ano, mes e o dia "01" com a função paste0
  mutate(data = paste0(ano,"-",mes,"-01")) |> 
  # para o R entender que essa variável é uma data, precisamos converter
  # com a função as.Date()
  mutate(data = as.Date(data))

# agora podemos observar o resultado:
energia_residencial_pb
```

## Função `mutate()`

Podemos criar uma variável chamada `data`, ao unir dia, mês e ano. Para unir textos, usamos a função `paste0`:

```{r eval=FALSE,`code-line-numbers`="6"}
energia_residencial_pb <- energia_residencial_pb |> 
  # unir ano, mes e o dia "01" com a função paste0
  mutate(data = paste0(ano,"-",mes,"-01")) |> 
  # para o R entender que essa variável é uma data, precisamos converter
  # com a função as.Date()
  mutate(data = as.Date(data))

# agora podemos observar o resultado:
energia_residencial_pb
```

## Função `mutate()`

Podemos criar uma variável chamada `data`, ao unir dia, mês e ano. Para unir textos, usamos a função `paste0`:

```{r eval=TRUE,`code-line-numbers`="9"}
energia_residencial_pb <- energia_residencial_pb |> 
  # unir ano, mes e o dia "01" com a função paste0
  mutate(data = paste0(ano,"-",mes,"-01")) |> 
  # para o R entender que essa variável é uma data, precisamos converter
  # com a função as.Date()
  mutate(data = as.Date(data))

# agora podemos observar o resultado:
energia_residencial_pb
```

## Função `mutate()`:

```{r}
#| echo=FALSE
font.size <- "14pt"

energia_residencial_pb |> 
  DT::datatable(
     options=list(
       initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
          "}")
       )
     ) 


```

## Função `arrange()`

![](img/arrange.png)

## Função `arrange()`

Note que a tabela está ordenada por data. E se quisermos ordenar por valor?

```{r}
energia_residencial_pb
```

##  {auto-animate="true"}

Note que a tabela está ordenada por data. E se quisermos ordenar por valor?

```{r}
energia_residencial_pb |> 
  arrange(consumo) # ordem crescente
```

##  {auto-animate="true"}

Note que a tabela está ordenada por nome do município. E se quisermos ordenar por valor?

```{r}
energia_residencial_pb |> 
  arrange(desc(consumo)) # ordem decrescente
```

## Função `summarise()`

![](img/summarise.png)

## Função `summarise()`

-   O último verbo do `dplyr` é o `summarise()`

-   Ele colapsa os dados (resume\_ em uma única linha

-   O objetivo é criar medidas como média, medianas, totais e outros.

## Função `summarise()` {auto-animate="true"}

Para obter o total consumido em energia na Paraíba em 2020:

```{r eval=FALSE ,`code-line-numbers`="3"}
energia_residencial_pb |> 
  # filtrar os dados para o ano de 2020
  filter(ano == 2020) |> 
  # sumar o consumo de todos os valores de 2020
  summarise(consumo_total = sum(consumo))
```

## Função `summarise()` {auto-animate="true"}

Para obter o total consumido em energia na Paraíba em 2020:

```{r eval=TRUE ,`code-line-numbers`="5"}
energia_residencial_pb |> 
  # filtrar os dados para o ano de 2020
  filter(ano == 2020) |> 
  # sumar o consumo de todos os valores de 2020
  summarise(consumo_total = sum(consumo))
```

## Função `summarise()` {auto-animate="true"}

Se quisermos saber o valor médio consumido, só substituir a função `sum()` por `mean()`:

```{r eval=TRUE ,`code-line-numbers`="5"}
energia_residencial_pb |> 
  # filtrar os dados para o ano de 2020
  filter(ano == 2020) |> 
  # sumar o consumo de todos os valores de 2020
  summarise(consumo_medio_mensal = mean(consumo))
```

## Função `group_by()`

![](img/groupby.png)

## Função `group_by()`

-   `summarise()` é mais útil quando usamos em conjunto com `group_by()`

-   `group_by()` muda a unidade de análise da base de dados completa para grupos de observações

-   Por exemplo, podemos estar interessado no gasto médio de saúde para cada ano

## Função `group_by()` {auto-animate="true"}

```{r eval=FALSE,`code-line-numbers`="3"}
energia_residencial_pb |> 
  # agrupamos as observações por ano
  group_by(ano) |> 
  # calculamos a média de gastos
  summarise(consumo_medio_anual = mean(consumo))
```

## Função `group_by()` {auto-animate="true"}

```{r eval=TRUE,`code-line-numbers`="5"}
energia_residencial_pb |> 
  # agrupamos as observações por ano
  group_by(ano) |> 
  # calculamos a média de gastos
  summarise(consumo_medio_anual = mean(consumo))
```

## Salvando Resultados

Podemos salvar esses resultados como um arquivo \*.csv\*:

```{r eval=FALSE}
energia_residencial_pb |> 
  write_csv("dados/energia_residencial_paraiba.csv")
```

# 4. Visualização {auto-animate="true"}

> "Apresentar dados com gráficos pode ajudar você a comunicar informações com clareza."

##  {auto-animate="true"}

![](img/ggplot.png){fig-align="center" width="400"}

##  {auto-animate="true"}

Vamos criar nosso primeiro gráfico:

```{r eval=TRUE,`code-line-numbers`="2"}
# camada de dados
energia_residencial_pb |> 
  # camada estética (mapeamento)
  ggplot(aes(x = data, y = consumo)) +
  # camada de geometria
  geom_point()
```

## 

![](img/layers.png)

## Geometrias

![](img/geoms.png)

## 

-   **geom** é o objeto geométrico que um gráfico usa para representar dados.

-   **Gráficos de barras** são construídos com `geom_bar`.

-   **Gráficos de linhas** são construídos com `geom_line`.

-   Assim, para mudar a geometria, só alterar o termo `geom_*`.

## `geom_point()`

```{r,`code-line-numbers`="3"}
energia_residencial_pb |> 
  ggplot(mapping = aes(x = data, y = consumo)) +
  geom_point(color = "blue")

```

## `geom_line()`

```{r,`code-line-numbers`="3"}
energia_residencial_pb |> 
  ggplot(mapping = aes(x = data, y = consumo)) +
  geom_line()
```

## `geom_smooth()`

```{r,`code-line-numbers`="3"}
energia_residencial_pb |> 
  ggplot(mapping = aes(x = data, y = consumo)) +
  geom_smooth()
```

## `geom_hist`

```{r ,`code-line-numbers`="3"}
energia_residencial_pb |> 
  ggplot(aes(x = consumo)) +
  geom_histogram()

```

## Múltiplos `geom_*`

```{r echo=TRUE, fig.height=4, fig.width=5, message=FALSE, warning=FALSE}

energia_residencial_pb |> 
  ggplot(aes(x = data, y = consumo)) +
  geom_point() +
  geom_line()
```

## `Dplyr` + `ggplot`

```{r}
energia_residencial_pb |> 
  group_by(ano) |> 
  summarise(consumo_total = sum(consumo)) |> 
  ggplot(aes(x = ano, y = consumo_total)) + 
  geom_col()
```

## Múltiplas faces com `facet_wrap`

```{r,`code-line-numbers`="5"}
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo)) + 
  geom_line() + 
  facet_wrap(~ano)

```

## Estilizando o gráfico

::: columns
::: {.column width="50%"}
```{r eval=FALSE}
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo)) + 
  geom_line() + 
  facet_wrap(~ano)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo)) + 
  geom_line() + 
  facet_wrap(~ano)
```
:::
:::

## Estilizando o gráfico

::: columns
::: {.column width="50%"}
```{r eval=FALSE,`code-line-numbers`="6"}
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo)) + 
  geom_line() + 
  facet_wrap(~ano) +
  labs(x = "Mês", y = "Consumo mensal", 
       title = "Consumo de energia elétrica residencial na Paraíba", 
       caption = "Fonte: Elaborado pelo autor")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo)) + 
  geom_line() + 
  facet_wrap(~ano) +
  labs(x = "Mês", y = "Consumo mensal", 
       title = "Consumo de energia elétrica residencial na Paraíba", 
       caption = "Fonte: Elaborado pelo autor")
```
:::
:::

## Estilizando o gráfico

::: columns
::: {.column width="50%"}
```{r eval=FALSE,`code-line-numbers`="9"}
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo)) + 
  geom_line() + 
  facet_wrap(~ano) +
  labs(x = "Mês", y = "Consumo mensal", 
       title = "Consumo de energia elétrica residencial na Paraíba", 
       caption = "Fonte: Elaborado pelo autor") +
  theme_light()
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo)) + 
  geom_line() + 
  facet_wrap(~ano) +
  labs(x = "Mês", y = "Consumo mensal", 
       title = "Consumo de energia elétrica residencial na Paraíba", 
       caption = "Fonte: Elaborado pelo autor") +
  theme_light()
```
:::
:::

## Estilizando o gráfico

::: columns
::: {.column width="50%"}
```{r eval=FALSE,`code-line-numbers`="4"}
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo, 
             color = as.factor(ano))) + 
  geom_line() + 
  facet_wrap(~ano) +
  labs(x = "Mês", y = "Consumo mensal", 
       title = "Consumo de energia elétrica residencial na Paraíba", 
       caption = "Fonte: Elaborado pelo autor") +
  theme_light()
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo, 
             color = as.factor(ano))) + 
  geom_line() + 
  facet_wrap(~ano) +
  labs(x = "Mês", y = "Consumo mensal", 
       title = "Consumo de energia elétrica residencial na Paraíba", 
       caption = "Fonte: Elaborado pelo autor") +
  theme_light()
```
:::
:::

## Estilizando o gráfico

::: columns
::: {.column width="50%"}
```{r eval=FALSE,`code-line-numbers`="10"}
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo, color = as.factor(ano))) + 
  geom_line() + 
  facet_wrap(~ano) +
  labs(x = "Mês", y = "Consumo mensal", 
       title = "Consumo de energia elétrica residencial na Paraíba", 
       caption = "Fonte: Elaborado pelo autor") +
  theme_light() + 
  guides(color="none")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
energia_residencial_pb |> 
  filter(ano > 2012) |> 
  ggplot(aes(x = mes, y = consumo, color = as.factor(ano))) + 
  geom_line() + 
  facet_wrap(~ano) +
  labs(x = "Mês", y = "Consumo mensal", 
       title = "Consumo de energia elétrica residencial na Paraíba", 
       caption = "Fonte: Elaborado pelo autor") +
  theme_light() +
  guides(color="none")

```
:::
:::

## Outras Visualizações

-   <https://robsonolima.com.br/post/visualizacao-com-ggplot2-e-seinfeld/>

-   <https://r-graph-gallery.com/>

-   <https://exts.ggplot2.tidyverse.org/gallery/>

-   <https://livro.curso-r.com/8-graficos.html>

# 5. Modelar

![](img/tidymodels.png){fig-align="center"}

## Séries Temporais

![](img/modeltime.png){fig-align="center"}

## Séries Temporais

> Vamos prever o valor futuro do consumo de energia residencial na Paraíba.

## Séries Temporais

```{r, eval=FALSE, `code-line-numbers`="2"}
# Instalar pacote:
# install.packages("modeltime")
# install.packages("timetk")

# carregar pacote
library(tidymodels)
library(modeltime)
library(timetk)

# carregar dados
energia <- read_csv("dados/energia_residencial_paraiba.csv")
```

## Séries Temporais

```{r, eval=FALSE, `code-line-numbers`="3"}
# Instalar pacote:
# install.packages("modeltime")
# install.packages("timetk")

# carregar pacote
library(tidymodels)
library(modeltime)
library(timetk)

# carregar dados
energia <- read_csv("dados/energia_residencial_paraiba.csv")
```

## Séries Temporais

```{r, eval=FALSE, `code-line-numbers`="6"}
# Instalar pacote:
# install.packages("modeltime")
# install.packages("timetk")

# carregar pacote
library(tidymodels)
library(modeltime)
library(timetk)

# carregar dados
energia <- read_csv("dados/energia_residencial_paraiba.csv")
```

## Séries Temporais

```{r, eval=FALSE, `code-line-numbers`="7"}
# Instalar pacote:
# install.packages("modeltime")
# install.packages("timetk")

# carregar pacote
library(tidymodels)
library(modeltime)
library(timetk)

# carregar dados
energia <- read_csv("dados/consumo_energia_brasil.csv")
```

## Séries Temporais

```{r, eval=FALSE, `code-line-numbers`="8"}
# Instalar pacote:
# install.packages("modeltime")
# install.packages("timetk")

# carregar pacote
library(tidymodels)
library(modeltime)
library(timetk)

# carregar dados
energia <- read_csv("dados/energia_residencial_paraiba.csv")
```

## Séries Temporais

```{r, `code-line-numbers`="11"}
# Instalar pacote:
# install.packages("modeltime")
# install.packages("timetk")

# carregar pacote
library(tidymodels)
library(modeltime)
library(timetk)

# carregar dados
energia <- read_csv("dados/energia_residencial_paraiba.csv")
```

## Séries Temporais

```{r}
energia |> 
  ggplot(aes(x = data, y = consumo)) +
  geom_line(color = "red") + 
  labs(x = "Data", y = "Consumo", title = "Consumo de Energia Residencial na Paraíba") +
  theme_bw()
```

## Séries Temporais

```{r, `code-line-numbers`="2"}
energia_residencial_pb |> 
  plot_time_series(data, 
                   consumo, 
                   .title = "Consumo de Energia Residencial na Paraíba"
                   )
```

## Séries Temporais

Base de Treinamento e Base de Teste

![](img/resamples.png)

## Séries Temporais {.smaller}

```{r}
set.seed(123)
# base de teste (20%) e treinamento (80%)
energia_treinamento_teste <- energia_residencial_pb |> 
  initial_time_split(prop = 0.8)

tbl_energia_treinamento <- training(energia_treinamento_teste)
tbl_energia_teste <- testing(energia_treinamento_teste)

energia_treinamento_teste |> 
    tk_time_series_cv_plan() |> 
    plot_time_series_cv_plan(data, consumo)
```

## Séries Temporais

Agora vamos informar quem são nossas variáveis explicativas: *o consumo de energia residencial será explicado apenas pelos seus valores passados. Poderiamos incluir outras variáveis, como feriados, tarifa de energia, etc.*

```{r}
receita_energia <- recipe(consumo ~ data, tbl_energia_treinamento)
```

## Séries Temporais

Por fim, definir o modelo, rodar e gerar previsões:

```{r}
# definir o modelo a ser rodado (ARIMA)
modelo_arima <- arima_reg() %>% 
  set_engine("auto_arima")

# Rodar o modelo na base de treinamento
workflow_arima <- workflow() %>% 
  add_recipe(receita_energia) %>% 
  add_model(modelo_arima) %>% 
  fit(tbl_energia_treinamento)

# Gerar uma previsão e comparar com o que realmente 
# aconteceu no período de teste
tbl_energia_calibracao <- workflow_arima |> 
  modeltime_calibrate(new_data = tbl_energia_teste)


tbl_energia_previsao <- tbl_energia_calibracao |> 
  modeltime_forecast(new_data = tbl_energia_teste,
                     actual_data = energia_residencial_pb)

```

## Séries Temporais

Gráfico da previsão comparada com o que ocorreu de fato:

```{r}
tbl_energia_previsao |> 
  plot_modeltime_forecast()
```

## Séries Temporais

É possível ainda criar uma série de medidas de performance. Elas são úteis para nos guiar sobre qual o melhor modelo:

```{r}
tbl_energia_calibracao |> 
  modeltime_accuracy(new_data = tbl_energia_teste) |> 
  knitr::kable()
```

## Séries Temporais

-   <https://robsonol.github.io/timeseries_r_book/>

## Análise de Churn

> A partir de informações dos clientes, podemos prever a probabilidade que um cliente abandone a empresa, nos permitindo desenvolver programas focados em retenção de clientes.

## Análise de Churn

```{r}
data(wa_churn, package = "modeldata")
```

## Análise de Churn

```{r}
#| echo=FALSE
font.size <- "14pt"

wa_churn |> 
  DT::datatable(
     options=list(
       initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
          "}")
       )
     ) 
```

## Análise de Churn

::: panel-tabset
## Gastos 

```{r}
#| output-location: column
#| 
wa_churn |> 
  ggplot(aes(x = monthly_charges)) +
  geom_histogram(aes(y = ..density..)) + 
  geom_density(fill = "blue", alpha = .2) +
  labs(x = "Gasto Mensal", y = "", 
       title = "Distribuição de Gastos Mensais dos Clientes") +
  theme_light()
```

## Sexo

```{r}
#| output-location: column

wa_churn |> 
  mutate(female = case_when(female == 1 ~ "Mulher",
                            female == 0 ~ "Homem")) |> 
  ggplot(aes(x = female, fill = female)) +
  geom_bar() + 
  labs(x = "", y = "Total de Clientes",
       title = "Clientes por Sexo") +
  guides(fill = "none") +
  theme_light()
  
```

## Tempo

```{r}
#| output-location: column

wa_churn |> 
  ggplot(aes(x = tenure)) + 
  geom_histogram(aes(y = ..density..)) +
  geom_density(fill = "blue", alpha = 0.2) +
  labs(x = "Tempo como cliente (meses)", y = "",
       title = "Distribuição de Tempo como Cliente") +
  theme_light()
```

## Churn

```{r}
#| output-location: column

wa_churn |> 
  ggplot(aes(x = churn)) +
  geom_bar() +
  labs(x = "Churn?", y = "", title = "") +
  theme_light()
```
:::

## Análise de Churn

```{r}
# Criar a base de treinamento e teste
churn_treinamento_teste <- wa_churn |> 
  initial_split(prop = 0.8)

tbl_treinamento <- churn_treinamento_teste |> training()
tbl_teste <- churn_treinamento_teste |> testing()

churn_treinamento_teste
```

## Análise de Churn

```{r}
# Transformações dos dados
receita_churn <- recipe(churn ~ ., data = tbl_treinamento) %>% 
  step_impute_linear(all_numeric()) %>% 
  step_dummy(all_nominal(), -all_outcomes()) %>% 
  step_normalize(all_numeric())

```

## Análise de Churn

```{r}
# Definir o modelo
modelo_floresta_aleatoria <- 
  rand_forest(
    mtry = 3, 
    trees = 200, 
    min_n = 30) |> 
  set_mode("classification") |> 
  set_engine("ranger")

```

## Análise de Churn

```{r}
workflow_churn <- workflow() |> 
  add_model(modelo_floresta_aleatoria) |> 
  add_recipe(receita_churn) |>  
  fit(tbl_treinamento)

```

## Análise de Churn {.smaller}

A matriz de confusão:

::: columns
::: {.column width="50%"}
```{r eval=FALSE}

# Matriz de Confusão
matriz_confusao_churn <- workflow_churn |> 
  predict(tbl_teste) |> 
  bind_cols(tbl_teste |> select(churn)) |>
  mutate_all(as.factor) |> 
  conf_mat(churn, .pred_class)

matriz_confusao_churn |> 
  autoplot(type = "heatmap")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| label: fig-mtcars
#| fig-cap: "Matriz de Confusão"
#| column: margin
#| fig-width: 8
#| fig-height: 4

# Matriz de Confusão
matriz_confusao_churn <- workflow_churn |> 
  predict(tbl_teste) |> 
  bind_cols(tbl_teste |> select(churn)) |>
  mutate_all(as.factor) |> 
  conf_mat(churn, .pred_class)

matriz_confusao_churn |> 
  autoplot(type = "heatmap")
```
:::
:::

## Análise de Churn

```{r}
matriz_confusao_churn |> 
  summary() |> 
  select(-.estimator) %>% 
  filter(.metric %in% c('precision', 'recall', 'f_meas',
                        'accuracy', 'spec', 'sens')) %>% 
  rename(Medida = 1, Estimativa = 2)

```

## Análise de Churn

```{r}
cliente_ficticio <- data.frame(
  female = 1, # mulher
  senior_citizen = 0, # não idosa
  partner = 1, # com parceiro(a)
  dependents = 0, # sem dependentes
  tenure = 2, # contrato a 2 anos
  phone_service = 0, # sem telefone
  multiple_lines = "No", # sem multiplas linhas
  internet_service = "DSL", # internet tipo DSL
  online_security = "No", # sem serviço de segurança online
  online_backup = "No", # sem serviço de backup online
  device_protection = "No", # sem serviço de seguro de roteador (?)
  tech_support = "No", # suporte técnico
  streaming_tv = "Yes", # usa streaming de tv
  streaming_movies = "Yes", # faz uso de streaming de filmes
  contract = "One year", # contrato anual
  paperless_billing = 1, # não recebe a conta fisicamente
  payment_method = "Bank transfer (automatic)", # débito automático
  monthly_charges = 70, # paga $70 por mes
  total_charges = 1680 # cobrança total 1400
)
```

## Análise de Churn

O modelo nos informa que provavelmente este cliente não deve cancelar sua assinatura em breve.

```{r}
# O modelo informa que provavelmente esta cliente não deve abandonar a empresa em breve
workflow_churn |> 
  predict(cliente_ficticio)
```

## Análise de Churn

-   <https://robsonolima.com.br/post/analise-de-churn-com-tidymodels-parte-1/>

-   <https://robsonolima.com.br/post/analise-de-churn-com-tidymodels-parte-2/>

## Segmentação de Clientes

> O objetivo da clusterização é agrupar pontos em subgrupos distintos. Uma das principais aplicações de clusterização é a **segmentação de clientes.** Com ela podemos separar certos grupos de clientes, para oferecer descontos, ofertas, códigos promocionais, etc.

## Segmentação de Clientes

## [![Animação por Allison Horst](img/kmeans.gif)](https://github.com/allisonhorst/stats-illustrations)

## Segmentação de Clientes

```{r}
clientes_shopping <- read_csv("dados/clientes_shopping.csv")

clientes_shopping |> 
  head()
```

## Segmentação de Clientes {.smaller}

::: panel-tabset
## Sexo

```{r}
#| output-location: column

clientes_shopping |>
  ggplot(aes(x = genero, fill = genero)) +
  geom_bar() + 
  labs(x = "", 
       y = "",
       title = "Distribuição dos Clientes por Gênero") +
  guides(fill = "none") +
  theme_light()
```

## Gastos x Renda

```{r}
#| output-location: column

# Uma inspeção visual parece indicar 
# 5 grupos distintos de pontos.
clientes_shopping |> 
  ggplot(aes(renda_anual_mil, score_gastos, color = genero)) +
  geom_point() +
  labs(x = "Renda Anual (em mil R$)",
       y = "Score de Gastos",
       title = "Relação entre Gastos e Renda dos Clientes",
       color = "") +
  theme_light()

```

## Idade

```{r}
#| output-location: column

clientes_shopping |> 
  ggplot(aes(x = idade)) +
  geom_histogram(fill = "cadetblue") +
  labs(x = "Idade", y = "",
       title = "Distribuição dos Clientes por Idade",
       caption = "Fonte: Elaborado pelo autor") +
  theme_light()

```
:::

## Segmentação de Clientes {.smaller}

Vamos construir os clusters usando o score de gastos e renda anual. Para o número de clusters, vamos usar cinco:

```{r}
clusters_clientes <- clientes_shopping |> 
  select(score_gastos, renda_anual_mil) |> 
  kmeans(centers = 5)

clusters_clientes |> 
  tidy()
```

## Segmentação de Clientes {.smaller}

Podemos repetir o gráfico de dispersão renda por gastos, mas usando como *cor* a classificação produzida pelo *K-means*.

```{r}
clusters_clientes |> 
  augment(clientes_shopping) |> 
  ggplot(aes(renda_anual_mil, score_gastos, color = .cluster)) +
  geom_point() +
  labs(x = "Renda Anual (em mil R$)", y = "Score de Gastos",
       title = "Relação entre Gastos e Renda dos Clientes", color = "Clusters") +
  theme_light()

```

## Segmentação de Clientes

Escolhendo outros valores de `K`, rodando para vários valores de `K` e

```{r}
kclusts <-
  tibble(k = 1:9) %>%
  mutate(
    kclust = map(k, ~ kmeans(select(clientes_shopping, score_gastos, renda_anual_mil), .x)),
    glanced = map(kclust, glance)
  )

kclusts %>%
  unnest(cols = c(glanced)) %>%
  ggplot(aes(k, tot.withinss)) +
  geom_line(alpha = 0.5, size = 1.2, color = "midnightblue") +
  geom_point(size = 2, color = "midnightblue")
```

## Segmentação de Clientes

Clusterização:

-   Marketing: *Segmentação de Clientes*

-   [Setor imobiliário: *grupos de imóveis*](https://medium.com/@tenzkunsang648/k-means-clustering-of-homes-and-neighborhoods-in-minneapolis-6b4fb02bc308)

-   [Identificar locais suscetíveis a crimes](https://periodicos.ufpb.br/ojs/index.php/tpa/article/view/50891/31372)

-   Clusterizar mensagens de redes sociais (twitters)

## Análise Financeira

![](img/tidyquant.png){fig-align="center"}

## Análise Financeira

```{r}
# instalar o pacote tidyquant
# install.packages("tidyquant")

# carregar o pacote
library(tidyquant)

tickers <- c("ITSA3.SA", "PETR3.SA", "VALE3.SA", "ABEV3.SA",
             "BBAS3.SA", "JBSS3.SA")

preco_acoes <- tickers |> 
  tq_get(get  = "stock.prices",
         from = "2021-01-02",
         to   = "2022-10-11") 

```

## Análise Financeira

```{r}
#| echo=FALSE
font.size <- "14pt"

preco_acoes |> 
  DT::datatable(
     options=list(
       initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
          "}")
       )
     ) 
```

## Análise Financeira

```{r}
preco_acoes |> 
  filter(symbol == "PETR3.SA") |> 
  filter(date > as.Date("2022-07-01")) |> 
  ggplot(aes(x = date, y = close)) +
  geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
  labs(x = "", y = "Preço de Fechamento") 
```

## Análise Financeira

```{r}
Ra <- preco_acoes %>% 
  select(date, symbol, close) %>% 
  group_by(symbol) %>% 
  tq_transmute(select = close,
               mutate_fun = periodReturn,
               period = "monthly",
               col_rename = "Ra")
```

## Análise Financeira

```{r}
Ra |> 
  ggplot(aes(x = date, y = Ra, color = symbol)) +
  geom_line() + 
  facet_wrap(~symbol)
```

## Análise Financeira

```{r}
Ra %>% 
  group_by(symbol) %>% 
  mutate(retorno_acumulado = cumsum(Ra)) %>% 
  ggplot(aes(x = date, y = retorno_acumulado, color = symbol)) +
  geom_line() + 
  geom_hline(yintercept = 0, linetype = 2) +
  scale_y_continuous(labels = scales::percent) +
  labs(x = "", 
       y = "Retorno acumulado", 
       title = "Retorno acumulado por empresa selecionada, 2021-2022",
       caption = "Fonte: Elaborado pelo autor.") +
  facet_wrap(~symbol, scales = "free_y", ncol = 2) +
  theme(legend.position = "none",
        axis.text.x = element_text(angle=45, size = 8))
```

## Análise Financeira

```{r}
Ra |> 
  tq_performance(
    Ra = Ra, 
    Rb = NULL, 
    Rf = 0,
    p = 0.95,
    performance_fun = SharpeRatio
    )
```

## Análise Financeira

![](img/otimizacao.png)

## Análise Financeira

![](img/plot-pesos-1.png)

## Análise Financeira

<https://robsonolima.com.br/post/analise-de-portfolio-com-r/>

<https://robsonolima.com.br/post/tidyquant-analise-financeira-no-r/>

## Customer Lifetime Value

*working*

## Análise de Sentimentos

*working*

## Análise Fatorial

*working*

# Comunicar

![](img/quarto_schematic.png)

## Comunicação

-   [Blogs](robsonolima.com.br)

-   **Relatórios**

-   [**Slides**](https://mine-cetinkaya-rundel.github.io/tidyperspective/talks/dagstat-2022.html#/title-slide)

-   [**Sites dinâmicos** com *Shiny*](https://shiny.rstudio.com/gallery/)

# Por onde começar a estudar?

![](img/r_rollercoaster.png)

## Onde Estudar?

<https://www.escolavirtual.gov.br/curso/325>

<https://livro.curso-r.com/index.html>
