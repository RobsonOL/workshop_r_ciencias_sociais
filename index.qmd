---
title: "Transformando Dados em Informações"
subtitle: "Usando **R** nas Ciências Sociais"
author: "Dr Robson Oliveira"
institute: "IFPB"
logo: logo_ifpb.png
footer: "robsonolima.com.br"
incremental: true
execute:
  echo: true
format: 
  revealjs:
    chalkboard: true
    theme: serif
    slide-tone: false
    auto-animate: true
    code-fold: show
    code-summary: ">"
editor: visual
---

# 

**Encontre esses slides em:**

![](img/qrcode_slides.png){fig-align="center"}

# 0. Contando Histórias com Dados

## Contando Histórias com Dados

::: columns
::: {.column width="50%"}
![Edward Morgan Forster. Autor de "Aspects of the Novel (1927)"](img/foster.jpg){fig-align="center"}
:::

::: {.column width="50%"}
-   História

-   Pessoas

-   Trama/enredo

-   Fantasia

-   Profecias

-   Padrões

-   Ritmo
:::
:::

## Contando Histórias com Dados

![](img/storytelling.png){fig-align="center" width="117"}

## Contando Histórias com Dados

## ![](img/data-science.png)

::: notes
Planejar

Simular

Adquirir

Explorar

Compartilhar
:::

# 1. Pré-Requisitos

## R

![](img/R_logo.svg.png){width="600"}

## R

::: nonincremental
1.  Baixar e instalar **R** em [<https://cloud.r-project.org>]{.rn}
:::

![](img/r_console.png){fig-align="center" width="400"}

## Rstudio

::: nonincremental
2.  Instalar o RStudio: [https://www.rstudio.com](https://www.rstudio.com/products/rstudio/download/)
:::

![](img/rstudio.png){fig-align="center" width="400"}

## Pacotes {auto-animate="true"}

::: nonincremental
3.  Instalar os pacotes necessários
:::

```{r eval=FALSE, `code-line-numbers`="2"}
#| echo=TRUE
# instalar um pacote:
install.packages("tidyverse")

# Só é preciso instalar um pacote uma única vez.
# Mas é preciso carrega-lo sempre que iniciarmos o R:
library(tidyverse)
```

## Pacotes {auto-animate="true"}

::: nonincremental
3.  Instalar os pacotes necessários
:::

```{r eval=FALSE, `code-line-numbers`="6"}
#| echo=TRUE
# instalar um pacote:
install.packages("tidyverse")

# Só é preciso instalar um pacote uma única vez.
# Mas é preciso carrega-lo sempre que iniciarmos o R:
library(tidyverse)
```

## Pacotes

![](img/tidyverse.png){fig-align="center" width="173"}

## Rodando Código no R {auto-animate="true"}

```{r}
1 + 2
```

## Rodando Código no R {auto-animate="true"}

```{r}
1 / 200 * 30
```

## Rodando Código no R {auto-animate="true"}

```{r}
sqrt(49)
```

## Criando objetos com `<-` {auto-animate="true"}

```{r, `code-line-numbers`="2"}
# podemos salvar o resultado de 3 * 4 como x
x <- 3 * 4
```

## Criando objetos com `<-` {auto-animate="true"}

```{r, `code-line-numbers`="5" }
# podemos salvar o resultado de 3 * 4 como x
x <- 3 * 4

# para inspecionar o valor de `x` digitamos seu nome:
x
```

## Chamando Funções

R tem uma série de funções. Por exemplo, para criar uma sequência de números entre 1 e 10, usamos a função `seq()`:

```{r}
seq(1, 10)
```

## Chamando Funções

Sempre chamamos uma função da seguinte forma:

```{r eval=FALSE}
nome_funcao(argumento1 = valor1, argumento2 = valor2, ...)
```

## Chamando Funções {auto-animate="true"}

Exemplos:

```{r, `code-line-numbers`="2" }
# somar dois valores
sum(10, 15)
```

## Chamando Funções {auto-animate="true"}

Exemplos:

```{r}
# somar dois valores
sum(10, 15)
```

```{r, `code-line-numbers`="2" }
# encontrar raiz quadrada
sqrt(49)
```

## Criando objetos com `<-` {auto-animate="true"}

Sempre **atribuimos** da mesma forma:

```{r eval=FALSE}
nome_objeto <- valor

```

## Criando objetos com `<-` {auto-animate="true"}

Sempre **atribuimos** da mesma forma:

```{r eval=FALSE}
nome_objeto <- valor

```

Dica: Podemos ler o código acima como "estamos salvando o valor como ***nome_objeto***".

## Nome de objetos

Nome de objetos precisam:

-   Começar com letras

-   Conter letras, números, `_` e `.`

-   Ser descritivo

-   Recomendo separar palavras com `_`: `sequencia_entre_1_10`

## Nome de objetos {auto-animate="true"}

```{r, `code-line-numbers`="2"}
# salvar a sequência de números como um objeto
sequencia_entre_1_10 <- seq(1, 10)

# somar todos os valores da sequência
sum(sequencia_entre_1_10)
```

## Nome de objetos {auto-animate="true"}

```{r, `code-line-numbers`="5"}
# salvar a sequência de números como um objeto
sequencia_entre_1_10 <- seq(1, 10)

# somar todos os valores da sequência
sum(sequencia_entre_1_10)
```

## Banco de dados {auto-animate="true"}

Um tipo especial de objeto é o `data.frame`:

```{r eval=FALSE, `code-line-numbers`="2" }
# mtcars é um banco de dados com informações de veículos:
dados_carros <- mtcars

# podemos inspecionar o data frame:
dados_carros
```

## Banco de dados {auto-animate="true"}

Um tipo especial de objeto é o `data.frame`:

```{r, `code-line-numbers`="5" }
# mtcars é um banco de dados com informações de veículos:
dados_carros <- mtcars

# podemos inspecionar o data frame:
dados_carros
```

## 

```{r}
#| echo=FALSE
dados_carros <- mtcars
#options(DT.options = list(pageLength = 4))
font.size <- "14pt"

dados_carros |> DT::datatable(
     options=list(
       initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
          "}")
       )
     ) 
```

## Banco de dados {auto-animate="true"}

Vamos trabalhar com dados no R no formato `tidy`:

![](img/tidy-1.png)

# 2. Importar Dados

![](img/import_r.png){fig-align="center" width="300"}

##  {auto-animate="true"}

Importando dados de despesas municipais (Paraíba) usando a função `read_csv()`:

```{r eval=FALSE, `code-line-numbers`="2" }
# importar o pacote
library(tidyverse)

# salvar o arquivo csv como o objeto "despesas"
despesas <- read_csv(file = "dados/dados_despesas_paraiba.csv")

# mostrar apenas as primeiras linhas do banco de dados:
despesas

```

##  {auto-animate="true"}

Importando dados de despesas municipais (Paraíba) usando a função `read_csv()`:

```{r eval=FALSE, `code-line-numbers`="5" }
# importar o pacote
library(tidyverse)

# salvar o arquivo csv como o objeto "despesas"
despesas <- read_csv(file = "dados/dados_despesas_paraiba.csv")

# mostrar apenas as primeiras linhas do banco de dados:
despesas

```

##  {auto-animate="true"}

Importando dados de despesas municipais (Paraíba) usando a função `read_csv()`:

```{r, `code-line-numbers`="8" }
# importar o pacote
library(tidyverse)

# salvar o arquivo csv como o objeto "despesas"
despesas <- read_csv(file = "dados/dados_despesas_paraiba.csv")

# mostrar apenas as primeiras linhas do banco de dados:
despesas
```

##  {#tabela-dinamica1}

```{r tab-dinamica}
#| echo=FALSE
#options(DT.options = list(pageLength = 4))
font.size <- "14pt"

despesas |> 
  sample_n(1000) |> 
  DT::datatable(
     options=list(
       initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
          "}")
       )
     ) 
```

# 3. Transformação de dados

![](img/hex-dplyr.png){fig-align="center" width="400"}

## Funções do `dplyr`

-   `filter()` filtra apenas observações com valores específicos

-   `arrange()` reordena as linhas da base

-   `select()` seleciona apenas variáveis de interesse

-   `mutate()` cria novas variáveis como função das demais

-   `summarise()` cria estatísticas descritivas

## Função `filter`

![](img/filter.png)

## Funcionamento da função `filter()`

```{r eval=FALSE}
filter(<DADOS>, <REGRAS>)
```

##  {auto-animate="true"}

Se quisermos filtrar as despesas dos municípios para o ano de 2020:

```{r}
filter(despesas, ano == 2020)
```

##  {auto-animate="true"}

Se quisermos filtrar as despesas dos municípios para o ano de 2020 e **para o município de João Pessoa**:

```{r}
filter(despesas, ano == 2020, municipio == "João Pessoa")
```

## Pipe `|>`

O *pipe `|>`* é um operador que permite reescrever as expressões de outra forma. Dica: Leia o *pipe* como um **ENTÃO**:

![](img/pipe1.png)

## 

```{r eval=FALSE}
# ao invés de escrever assim:
filter(despesas, ano == 2020, municipio == "João Pessoa")


```

```{r}
# escrevemos assim:
despesas |> # pegue os dados
  filter(ano == 2020, municipio == "João Pessoa") # ENTÃO filtre para...
```

## Função `select()`

![](img/select.png)

## 

Podemos selecionar apenas as variáveis desejadas, como ano, município, conta e despesas empenhadas:

```{r}
despesas |> select(ano, municipio, conta, despesas_empenhadas)
```

## 

Podemos usar o `|>` para concatenar `filter()` e `select()`:

```{r}
despesas |> 
  filter(ano == 2020 & conta == "Saúde") |> # ENTÃO filtre os dados
  select(municipio, despesas_empenhadas) # então selecione as colunas
```

## Função `arrange()`

![](img/arrange.png)

##  {auto-animate="true"}

Note que a tabela está ordenada por nome do município. E se quisermos ordenar por valor?

```{r}
despesas |> 
  filter(ano == 2020 & conta == "Saúde") |> 
  select(municipio, despesas_empenhadas)
```

##  {auto-animate="true"}

Note que a tabela está ordenada por nome do município. E se quisermos ordenar por valor?

```{r}
despesas |> 
  filter(ano == 2020 & conta == "Saúde") |> 
  select(municipio, despesas_empenhadas) |> 
  arrange(despesas_empenhadas) # ordem crescente
```

##  {auto-animate="true"}

Note que a tabela está ordenada por nome do município. E se quisermos ordenar por valor?

```{r}
despesas |> 
  filter(ano == 2020 & conta == "Saúde") |> 
  select(municipio, despesas_empenhadas) |> 
  arrange(desc(despesas_empenhadas)) # ordem decrescente
```

## Função `mutate()`

![](img/mutate.png)

## 

Na função `mutate()` especifique o nome da nova variável e após o sinal de `=` indique a transformação que deseja realizar:

```{r eval=FALSE}

# a função abaixo cria uma variavel nova como a soma
# da variavel_1 e variavel_2
dados <- mutate(variavel_nova = variavel_1 + variavel_2)
```

##  {auto-animate="true"}

Podemos criar uma variável chamada `restos_a_pagar_processadas` que são as dispesas liquidadas e não pagas.

```{r eval=FALSE}
# vamos filtrar apenas para gastos de saúde em 2020
despesas |> 
  filter(ano == 2020, conta == "Saúde")

```

##  {auto-animate="true"}

Podemos criar uma variável chamada `restos_a_pagar_processadas` que são as dispesas liquidadas e não pagas.

```{r eval=FALSE}
# vamos filtrar apenas para gastos de saúde em 2020
despesas |> 
  filter(ano == 2020, conta == "Saúde") |> 
  # e criar a variável de restos a pagar com mutate()
  mutate(restos_a_pagar_processadas = despesas_liquidadas - despesas_pagas)
  
```

##  {auto-animate="true"}

Podemos criar uma variável chamada `restos_a_pagar_processadas` que são as dispesas liquidadas e não pagas.

```{r}
# vamos filtrar apenas para gastos de saúde em 2020
despesas |> 
  filter(ano == 2020, conta == "Saúde") |> 
  # e criar a variável de restos a pagar com mutate()
  mutate(restos_a_pagar_processadas = despesas_liquidadas - despesas_pagas) |> 
  # para facilitar a visualização das informações, vamos usar select e arrange:
  select(municipio, restos_a_pagar_processadas) |> arrange(desc(restos_a_pagar_processadas))
```

## 

```{r}
#| echo=FALSE
font.size <- "14pt"

despesas |> 
  filter(ano == 2020, conta == "Saúde") |> 
  # e criar a variável de restos a pagar com mutate()
  mutate(restos_a_pagar_processadas = despesas_liquidadas - despesas_pagas) |> 
  # para facilitar a visualização das informações, vamos usar select e arrange:
  select(municipio, restos_a_pagar_processadas) |> arrange(desc(restos_a_pagar_processadas)) |> 
  DT::datatable(
     options=list(
       initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
          "}")
       )
     ) 


```

## Função `summarise()`

![](img/summarise.png)

## Função `summarise()`

-   O último verbo do `dplyr` é o `summarise()`

-   Ele colapsa os dados (resume\_ em uma única linha

-   O objetivo é criar medidas como média, medianas, totais e outros.

##  {auto-animate="true"}

Para obter o total empenhado com saúde em 2020 podemos:

```{r eval=TRUE}
# filtrar os dados
despesas |> 
  filter(ano == 2020, conta == 'Saúde') 
```

##  {auto-animate="true"}

Para obter o total gasto com saúde em 2020 podemos:

```{r eval=TRUE}
# filtrar os dados
despesas |> 
  filter(ano == 2020, conta == 'Saúde') |> 
  # somar os valores empenhados:
  summarise(total_empenhado_saude = sum(despesas_empenhadas))
```

## 

Se quisermos saber o valor médio empenhado, só substituir a função `sum()` por `mean()`:

```{r}
despesas |> 
  filter(ano == 2020, conta == 'Saúde') |> 
  summarise(empenho_medio_saude = mean(despesas_empenhadas))
```

## Função `group_by()`

![](img/groupby.png)

## 

-   `summarise()` é mais útil quando usamos em conjunto com `group_by()`

-   `group_by()` muda a unidade de análise da base de dados completa para grupos de observações

-   Por exemplo, podemos estar interessado no gasto médio de saúde para cada ano

##  {auto-animate="true"}

```{r eval=FALSE}
despesas |> 
  # filtramos apenas para gastos de saúde
  filter(conta == 'Saúde')
```

##  {auto-animate="true"}

```{r eval=FALSE}
despesas |> 
  # filtramos apenas para gastos de saúde
  filter(conta == 'Saúde') |> 
  # agrupamos as observações por ano
  group_by(ano)
```

##  {auto-animate="true"}

```{r}
despesas |> 
  # filtramos apenas para gastos de saúde
  filter(conta == 'Saúde') |> 
  # agrupamos as observações por ano
  group_by(ano) |> 
  # calculamos a média de gastos
  summarise(total_empenhos = mean(despesas_empenhadas))
```

## Salvando Resultados

Para que as transformações feitas nos dados sejam reutilizadas, podemos salvar o resultado como um objeto com o operador `<-`:

```{r}
# salvamos o que fizemos no objeto despesas_saude_ano
despesas_saude_ano <- despesas |> 
  filter(conta == 'Saúde') |> 
  group_by(ano) |> 
  summarise(total_empenhos = mean(despesas_empenhadas))
```

## Salvando Resultados

E agora podemos ver o que foi feito acima:

```{r}
despesas_saude_ano
```

# 4. Visualização {auto-animate="true"}

> "Apresentar dados com gráficos pode ajudar você a comunicar informações com clareza."

##  {auto-animate="true"}

![](img/ggplot.png){fig-align="center" width="400"}

##  {auto-animate="true"}

Antes de criar o primeiro gráfico, vamos modificar o banco de dados para mostrar gastos com saúde e educação em 2020:

```{r}
despesas_saude_educacao <- despesas |> 
  filter(ano == 2020, conta == 'Saúde' | conta == 'Educação') |> 
  filter(municipio != "João Pessoa" & municipio != "Campina Grande") |> 
  select(ano, municipio, conta, despesas_pagas) |> 
  # essas funções são um pouco mais avançadas. Mas não se preocupe por enquanto.
  pivot_wider(names_from = "conta", values_from = "despesas_pagas") |> 
  janitor::clean_names()

```

##  {auto-animate="true"}

Vamos criar nosso primeiro gráfico:

```{r eval=FALSE}
# camada de dados
despesas_saude_educacao
```

##  {auto-animate="true"}

Vamos criar nosso primeiro gráfico:

```{r eval=FALSE}
# camada de dados
despesas_saude_educacao |> 
  # camada estética (mapeamento)
  ggplot(aes(x = educacao, y = saude))
```

##  {auto-animate="true"}

Vamos criar nosso primeiro gráfico:

```{r}
# camada de dados
despesas_saude_educacao |> 
  # camada estética (mapeamento)
  ggplot(aes(x = educacao, y = saude)) +
  # camada de geometria
  geom_point()
```

## 

![](img/layers.png)

## Geometrias

![](img/geoms.png)

## 

-   **geom** é o objeto geométrico que um gráfico usa para representar dados.

-   **Gráficos de barras** são construídos com `geom_bar`.

-   **Gráficos de linhas** são construídos com `geom_line`.

-   Assim, para mudar a geometria, só alterar o termo `geom_*`.

## `geom_point()`

```{r}
despesas_saude_educacao |>
  ggplot(mapping = aes(x = educacao, y = saude)) + 
  geom_point(color = 'blue')

```

## `geom_smooth()`

```{r}
despesas_saude_educacao |>
  ggplot(mapping = aes(x = educacao, y = saude)) + 
  geom_smooth()


```

## Múltiplos `geom_*`

```{r echo=TRUE, fig.height=4, fig.width=5, message=FALSE, warning=FALSE}

despesas_saude_educacao |>
  ggplot(mapping = aes(x = educacao, y = saude)) + 
  geom_smooth() +
  geom_point()

```

## `geom_hist`

```{r echo=TRUE, fig.height=4, fig.width=5, message=FALSE, warning=FALSE}
despesas_saude_educacao |> 
  ggplot(aes(x = saude)) +
  geom_histogram()

```

# 5. Modelar

## Regressão

Regressão de salário na RAIS

## Séries Temporais

Previsão de vendas

## Customer Lifetime Value

re

## Análise de Churn

asdasdasdasd

## Segmentação de Clientes

Com clusterização

## Otimização de Carteira

otimização de carteira

## CAPM

aaasdadad

## Análise de Sentimentos

vale a pena?

## Análise Fatorial

aasasdasd

# Comunicar

-   [Blogs](https://robsonlima.netlify.app/)

-   **Relatórios**

-   [**Slides**](https://mine-cetinkaya-rundel.github.io/tidyperspective/talks/dagstat-2022.html#/title-slide)

-   [**Sites dinâmicos** com *Shiny*](https://shiny.rstudio.com/gallery/)

## 

# Onde Estudar?

<https://www.escolavirtual.gov.br/curso/325>

<https://livro.curso-r.com/index.html>
